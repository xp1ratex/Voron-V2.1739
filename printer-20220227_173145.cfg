# This file contains common pin mappings for the Fysetc Spider board.
# To use this config, the firmware should be compiled for the STM32F446.
# When calling "menuconfig", enable "extra low-level configuration setup"
# and select the "12MHz crystal" as clock reference
# For flashing, write the compiled klipper.bin to memory location 0x08000000

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2 250/300/350mm Spider TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths							[mcu] section
## Thermistor types						[extruder] and [heater_bed] sections - See 'sensor types' list at end of file
## Z Endstop Switch location			[safe_z_home] section
## Homing end position				[gcode_macro G32] section
## Z Endstop Switch  offset for Z0		[stepper_z] section
## Probe points							[quad_gantry_level] section
## Min & Max gantry corner postions		[quad_gantry_level] section
## PID tune								[extruder] and [heater_bed] sections
## Fine tune E steps					[extruder] section

## [INPUT SHAPER] ##

#[mcu rpi]
#serial: /tmp/klipper_host_mcu

#[adxl345]
#cs_pin: rpi:None

#[resonance_tester]
#accel_chip: adxl345
#probe_points:
#    150,150,40  # an example

[mcu]
##  You need to select 'Communication interface' to USB in 'make menuconfig'
##  when you compile Klipper for Spider
##	Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
#serial: /dev/ttyAMA0/usb-Klipper_stm32f446xx_230032000851363131363530-if00
##	If you want to use the Raspberry uart0 to communicate with Spider, 
##  you need to select 'Communication interface' to 'Serial (on USART1 PA10/PA9)' 
##  in 'make menuconfig' when you compile klipper and set the serial as below
##--------------------------------------------------------------------
serial: /dev/ttyAMA0
##--------------------------------------------------------------------

## Uncomment below if you're using the Raspberry uart0 to communicate with Spider
restart_method: command

[mcu expander]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_390020000843564636373420-if00

restart_method: command

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 7000			        #Max 4000m default: 3000
#max_accel_to_decel: 10000   # For input shaper
max_z_velocity: 15			    #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 1000
square_corner_velocity: 5.0

[respond]
default_prefix: //

# Virtual SD Card
[virtual_sdcard]
path: ~/gcode_files

#####################################################################
#      X/Y Stepper Settings
#####################################################################

[stepper_x]
##	Connected to X-MOT (B Motor)
step_pin: PE11
dir_pin: !PE10
enable_pin: !PE9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
endstop_pin: ^PB14
position_min: 0

##--------------------------------------------------------------------

##	Uncomment below for 250mm build
#position_endstop: 250
#position_max: 250

##	Uncomment for 300mm build
position_endstop: 300
position_max: 300

##	Uncomment for 350mm build
#position_endstop: 350
#position_max: 350

##--------------------------------------------------------------------
homing_speed: 50   #Max 100 default 25
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PE7
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

[stepper_y]
##	Connected to Y-MOT (A Motor)
step_pin: PD8
dir_pin: !PB12
enable_pin: !PD9
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:400  #set to 400 for 0.9 degree stepper
endstop_pin: ^PB13
position_min: 0
##--------------------------------------------------------------------

##	Uncomment for 250mm build
#position_endstop: 250
#position_max: 250

##	Uncomment for 300mm build
position_endstop: 305
position_max: 305

##	Uncomment for 350mm build
#position_endstop: 350
#position_max: 350

##--------------------------------------------------------------------
homing_speed: 50  #Max 100 default 25
homing_retract_dist: 5
homing_positive_dir: true

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PE15
interpolate: True
run_current: 0.8
hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Z Stepper Settings
#####################################################################

## In Z-MOT Position
## Z0 Stepper - Front Left
[stepper_z]
step_pin: PD14
dir_pin: !PD13
enable_pin: !PD15
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16
##  In Z- Position
endstop_pin: ^PA0
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: 1
##--------------------------------------------------------------------

##	Uncomment below for 250mm build
#position_max: 240

##	Uncomment below for 300mm build
position_max: 290

##	Uncomment below for 350mm build
#position_max: 340

##--------------------------------------------------------------------
position_min: -5
homing_speed: 8 #Default 8
second_homing_speed: 3
homing_retract_dist: 3

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PD10
uart_address: 0
interpolate: True
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	In E1-MOT Position
##	Z1 Stepper - Rear Left
[stepper_z1]
step_pin: PE6
dir_pin: PC13
enable_pin: !PE5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC14
interpolate: True
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	In E2-MOT Position
##	Z2 Stepper - Rear Right
[stepper_z2]
step_pin: PE2
dir_pin: !PE4
enable_pin: !PE3
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PC15
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

##	In E3-MOT Position
##	Z3 Stepper - Front Right
[stepper_z3]
step_pin: PD12
dir_pin: PC4
enable_pin: !PE8
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[tmc2209 stepper_z3]
uart_pin: PA15
interpolate: true
run_current: 0.8
hold_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################

##	In E0-MOT Position
[extruder]
step_pin: PD5
dir_pin: !PD6
enable_pin: !PD4

##	Update value below when you perform extruder calibration
##	If you ask for 100mm of filament, but in reality it is 98mm:
##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
#rotation_distance: 21.545003545	#Bondtech 5mm Drive Gears
rotation_distance: 52.47241 #lgx original 54.636
##	Update Gear Ratio depending on your Extruder Type
##	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##	Use 80:20 for M4, M3.1
gear_ratio: 44:14, 37:17
#gear_ratio: 50:17				#BMG Gear Ratio
microsteps: 16
full_steps_per_rotation: 200	#200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
##      In E0 OUT Position
heater_pin: PB15
##	Validate the following thermistor type to make sure it is correct
sensor_type: PT1000
sensor_pin: PC0
min_temp: 10
max_temp: 280
max_power: 1.0
min_extrude_temp: 170
#control = pid
#pid_kp = 26.213
#pid_ki = 1.304
#pid_kd = 131.721
##	Try to keep pressure_advance below 1.0
pressure_advance: 0.058 #standard 0.05 lat 0.0435 was 0.055
##	Default is 0.040, leave stock
pressure_advance_smooth_time: 0.040

##	In E0-MOT Position
##	Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 extruder]
uart_pin: PD7
interpolate: false
run_current: 0.5
hold_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Bed Heater
#####################################################################
[heater_bed]
##	SSR Pin - In BED OUT position
heater_pin: PB4
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: PC3
##	Adjust Max Power so your heater doesn't warp your bed
max_power: 1.0
min_temp: 0
max_temp: 120
#control: pid
#pid_kp: 58.437
#pid_ki: 2.347
#pid_kd: 363.769

#####################################################################
#	Probe
#####################################################################

[probe]
##	Inductive Probe - If you use this section , please comment the [bltouch] section
##	This probe is not used for Z height, only Quad Gantry Leveling
##	In Z+ position
##	If your probe is NO instead of NC, add change pin to ^PA3
pin: ^PA3
x_offset: 2.0
y_offset: 25.0
z_offset: 7.6
speed: 10 #Default 10.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 10
lift_speed: 30

#####################################################################
#	Bltouch
#####################################################################

#[bltouch]
##	Bltouch - If you use this section , please comment the [probe] section
##	More infomation at : https://www.klipper3d.org/BLTouch.html
##	This bltouch is not used for Z height, only Quad Gantry Leveling
##	In Z+ Position
#sensor_pin: PA0
##	In Y+ Position
#control_pin: PA2
#x_offset: 0
#y_offset: 25.0
#z_offset: 0
#speed: 10.0
#samples: 3
#samples_result: median
#sample_retract_dist: 3.0
#samples_tolerance: 0.006
#samples_tolerance_retries: 3

#####################################################################
#	Fan Control
#####################################################################

[heater_fan hotend_fan]
##	Hotend Fan - FAN0 Connector
pin: PB0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##	If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan_generic nevermore]
##	Print Cooling Fan - FAN1 Connector
pin: PB1
#pwm: true
max_power: 1.0
kick_start_time: 0.5
##	Depending on your fan, you may need to increase this value
##	if your fan will not start. Can change cycle_time (increase)
##	if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan controller_fan]
##	Controller fan - FAN2 Connector
pin: PB2
cycle_time: 0.1
shutdown_speed: 0
max_power: 1 #0.99846
#hardware_pwm: False
#fan_speed: 0.9 #0.9984
kick_start_time: 0.1
heater: heater_bed
heater_temp: 45.0

[fan]
pin: expander:PA0
max_power: 1.0
#pwm: true
cycle_time: 0.010
#value: 0
#shutdown_value: 0
kick_start_time: 0.5
off_below: 0.10

#[heater_fan exhaust_fan]
##  Exhaust fan - In E2 OUT Positon
#pin: PB3
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0


#####################################################################
#	LED Control
#####################################################################

#[output_pin caselight ]
##  Chamber Lighting - In 5V-RGB Position
#pin: PD3
#pwm: true
#shutdown_value: 0
#value:100
#cycle_time: 0.01

[neopixel sb_leds]
pin: PD3
#   The pin connected to the neopixel. This parameter must be provided.
chain_count: 3
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRBW
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0
#   Sets the initial LED color of the Neopixel. Each value should be
#   between 0.0 and 1.0. The WHITE option is only available on RGBW
#   LEDs. The default for each color is 0.#

# Most configuration for the macros can be done by modifying the variables in the _sb_vars macro
# at the start of this file.



#########################################
#	Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
home_xy_position:205.6,305
speed:100
z_hop:25
   
[quad_gantry_level]
##	Use QUAD_GANTRY_LEVEL to level a gantry.
##	Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##	MAX (250, 250), (300,300), or (350,350) depending on your printer size
##	to respective belt positions
	
##	Gantry Corners for 300mm Build
##	Uncomment for 300mm build
gantry_corners:
	-60,-10
	360,370
##	Probe points
points:
	50,25
	50,225
	250,225
	250,25
#--------------------------------------------------------------------
speed: 200 #Default 100
horizontal_move_z: 20
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

#####################################################################
#	Displays
#####################################################################

#--------------------------------------------------------------------

#[display]
#	mini12864 LCD Display
#lcd_type: uc1701
#cs_pin: PC11
#a0_pin: PD2
#rst_pin: PC10
#encoder_pins: ^PC6,^PC7
#click_pin: ^!PA8
#contrast: 63
#spi_bus: spi1
#spi_software_mosi_pin: PA7
#spi_software_miso_pin: PA6
#spi_software_sclk_pin: PA5

#[neopixel fysetc_mini12864]
#	To control Neopixel RGB in mini12864 display
#pin: PC12
#chain_count: 3
#chain_count: 60
#initial_RED: 0.1
#initial_GREEN: 0.5
#initial_BLUE: 0.0
#color_order: RGB

#	Set RGB values on boot up for each Neopixel. 
#	Index 1 = display, Index 2 and 3 = Knob
#[delayed_gcode setdisplayneopixel]
#initial_duration: 1
#gcode:
#        SET_LED LED=fysetc_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
#        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
#        SET_LED LED=fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

#--------------------------------------------------------------------

#####################################################################
# Extra tempsensors
#####################################################################

[temperature_sensor raspberry_pi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[temperature_sensor chamber_temp]
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC1
min_temp: 10
max_temp: 200
gcode_id: C

[thermistor chamber_temp_a]
temperature1: 25
resistance1: 10000
beta: 3950

[temperature_sensor enclosure_temp]
sensor_type: chamber_temp_a
sensor_pin: PC2
min_temp: 0
max_temp: 100
gcode_id: D

####################################################################
# Leds
####################################################################




#####################################################################
#	Macros
#####################################################################

[gcode_macro PRINT_START]
gcode:
   BED_MESH_CLEAR
   {% set BED_TEMP = params.BED|default(110)|float %}
   {% set EXTRUDER_TEMP = params.EXTRUDER|default(245)|float %}
   {% set CHAMBER_TEMP = params.CHAMBER|default(50)|float %}
   {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default("ABS")|upper %}
   {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}

   {% if FILAMENT_TYPE == "ABS" or FILAMENT_TYPE == "ASA" or FILAMENT_TYPE == "PC" %}
      status_busy
      SET_FAN_SPEED FAN=nevermore SPEED=1    ; Turn on the nevermore
      M117 Preheating
      M190 S110                              ; wait for bed to heat to target temperature
      M109 S160                              ; wait for hotend to heat to 160C - soften filament, but no oozing
      G21                                    ; use mmm
      G90                                    ; use absolute coordinates
      M83                                    ; extruder relative mode
      M117 Homing
      G28                                    ; home all axes
      SET_GCODE_OFFSET Z=0 MOVE=1       
      G1 X150 Y150 Z10 F12000                ; Move to the middle of the bed
      M106 S255                              ; Turn on the PT-fan
      TEMPERATURE_WAIT SENSOR='temperature_sensor chamber_temp' MINIMUM={CHAMBER_TEMP} ; wait for heat soak
      #ATTACH_PROBE_LOCK
      QUAD_GANTRY_LEVEL
      #G28 Z
      ADAPTIVE_BED_MESH SIZE={FL_SIZE}
      #BED_MESH_CALIBRATE
      M190 S{BED_TEMP} 
      G0 X105 Y305 Z10 F9000                 ; move to startpoint of purgebucket
      M107                                   ; turn off cooling fan
      M117 Heating to target temp
      M109 S{EXTRUDER_TEMP}                  ; wait for hotend to get to target temperature
      clean_nozzle
      CALIBRATE_Z
      #DOCK_PROBE_UNLOCK
      M402
      G0 X115 Y5 Z10 F9000                   ; move to startpoint of purgeline
   {% endif %}

   {% if FILAMENT_TYPE == "FLEX" %}
      M117 Preheating
      SET_FAN_SPEED FAN=nevermore SPEED=1    ; Turn on the nevermore
      M190 S{BED_TEMP}                       ; wait for bed to heat to target temperature
      M109 S160                              ; wait for hotend to heat to 180C - soften filament, but no oozing
      G21                                    ; use mmm
      G90                                    ; use absolute coordinates
      M83                                    ; extruder relative mode
      M117 Homing
      G28                                    ; home all axes
      SET_GCODE_OFFSET Z=0 MOVE=1 
      #ATTACH_PROBE_LOCK
      QUAD_GANTRY_LEVEL
      #G28 Z
      ADAPTIVE_BED_MESH SIZE={FL_SIZE}
      #BED_MESH_CALIBRATE
      G0 X105 Y305 Z10 F9000                 ; move to startpoint of purgebucket
      clean_nozzle
      CALIBRATE_Z
      #DOCK_PROBE_UNLOCK
      M402
      G0 X115 Y5 Z10 F9000                   ; move to startpoint of purgeline
      M107                                   ; turn off cooling fan
      M117 Heating to target temp
      M109 S{EXTRUDER_TEMP}                  ; wait for hotend to get to target temperature
   {% endif %}
   status_printing
   PURGE_LINE 

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1

[gcode_macro G32]
gcode:
    status_leveling
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
       
    ##	Uncomment for 300 build
    G0 X150 Y150 Z30 F3600
    
    #--------------------------------------------------------------------

[gcode_macro PURGE_LINE]
gcode:
    CG28
    G0 X115 Y5 Z0.3 F9000         ; Move to start position
    G92 E0                        ; Reset Extruder
    G1 E10 F600                   ; Extrude a little
    G1 X10 E20 F1000              ; Draw line
    G92 E0                        ; Reset Extruder
    G91                           ; relative positioning
    G0 X50 F18000                 ; Wipe line 1
    G0 X-40 F18000                ; Wipe line 2
    G0 Z10 F1000                  ; Raise nozzle
    G90

[gcode_macro CG28]
description: Helper: Conditional homing
gcode:
  G0 Z25
  {% if "xyz" not in printer.toolhead.homed_axes %}
  G28
  {% endif %}

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    status_calibrating_z
    CG28
    M117 Z-Calibration..
    #_SET_LOWER_STEPPER_CURRENT  # I lower the stepper current for homing and probing 
    #ATTACH_PROBE                # a macro for fetching the probe first
    M401
    BASE_CALIBRATE_Z
    PROBE_PARK_LATER
    #DOCK_PROBE                # and parking it afterwards
    #_RESET_STEPPER_CURRENT      # resetting the stepper current
    M117

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set filament_type = params.FILAMENT|default("ABS")|upper %}
    status_busy
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F1800                ; retract filament was F3600
    G91                            ; relative positioning
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear
    BED_MESH_CLEAR
    RESPOND MSG="Done printing file."
    {% if filament_type == "ABS" or filament_type == "ASA" %}
    FILTER_CHAMBER TEMP=45
    {% else %}
    SET_FAN_SPEED FAN=nevermore SPEED=0
    status_ready
    {% endif %}
    RESPOND MSG="All done, GG."

[gcode_macro FILTER_CHAMBER]
gcode:
    {% set TEMP = params.TEMP|default(50)|float %} #bed temp (C)
    status_busy
    M117 Filtering chamber
    RESPOND MSG="Filtering chamber."
    SET_FAN_SPEED FAN=nevermore SPEED=1
    #SET_FAN_SPEED FAN=exhaust_fan SPEED=1
    TEMPERATURE_WAIT SENSOR=heater_bed MAXIMUM={TEMP}
    SET_FAN_SPEED FAN=nevermore SPEED=0
    #SET_FAN_SPEED FAN=exhaust_fan SPEED=0
    M117 Filtering DONE
    RESPOND MSG="Filtering done."
    status_ready

[gcode_macro PRESENT_PLATE]
gcode:
  {% set FEED_RATE = params.FEED_RATE|default(12000)|float %}
  {% set posy = printer.toolhead.axis_maximum.y|float / 2.0 %}
  {% set posx = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set min_z = 200.0 %}
  {% set toolhead_z = printer.toolhead.position.z|float %}
  {% set target_z = toolhead_z + 50 %}
  {% if target_z > max_z %}
    {% set target_z = max_z %}
  {% endif %}
  {% if target_z < min_z %}
    {% set target_z = min_z %}
  {% endif %}
  G0 X{posx} Y{posy} Z{target_z} F{FEED_RATE}

[gcode_macro LOAD_FILAMENT]
gcode:
   ; TODO - this may not work if changing filament in the middle of a print.
   SAVE_GCODE_STATE NAME=__filament__load
   M83
   G1 E5 F75
   G1 E50 F500
   #clean_nozzle PURGE_SPEED={PRIME_SPEED} PURGE_LENGTH={PURGE_LENGTH}
   G1 E50 F400
   G1 E50 F400
   G1 E-1 F900
   RESTORE_GCODE_STATE NAME=__filament__load
  
[gcode_macro UNLOAD_FILAMENT]
gcode:
   SAVE_GCODE_STATE NAME=__filament__load
   M83
   G1 E-13 F1500
   G1 E17 F400
   G1 E-13 F1500
   G1 E17 F400
   G1 E-13 F1500
   G1 E17 F400
   G1 E-50 F1500
   G1 E-50 F1500
   RESTORE_GCODE_STATE NAME=__filament__load

[gcode_macro FRONT_RIGHT]
gcode:
   {% set x_park = printer.toolhead.axis_maximum.x|float - 15.0 %}
   {% set y_park = printer.toolhead.axis_minimum.y|float + 15.0 %}
   G0 X{x_park} Y{y_park} F1200

[gcode_macro FRONT_CENTER]
gcode:
   {% set x_park = printer.toolhead.axis_maximum.x|float / 2.0 %}
   {% set y_park = printer.toolhead.axis_minimum.y|float + 15.0 %}
   G0 X{x_park} Y{y_park} F12000

[gcode_macro TOP]
gcode:
   {% set z_park = printer.toolhead.axis_maximum.z|float - 50.0 %}
   G0 Z{z_park} F12000

[gcode_macro CUBE_CENTRE]
gcode:
   {% set x_centre = printer.toolhead.axis_maximum.x|float / 2.0 %}
   {% set y_centre = printer.toolhead.axis_maximum.y|float / 2.0 %}
   {% set z_centre = printer.toolhead.axis_maximum.z|float / 2.0 %}
   G0 X{x_centre} Y{y_centre} Z{z_centre} F12000

[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 40, 40
mesh_max: 260,260
##--------------------------------------------------------------------
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
algorithm: bicubic
relative_reference_index: 12
mesh_pps: 2,2

[z_calibration]
probe_nozzle_x: 205.5
probe_nozzle_y: 305
probe_switch_x: 213
probe_switch_y: 283.5
probe_bed_x: 150
probe_bed_y: 150 
switch_offset: 0.520 # Decreasing will move the nozzle farther away from the  was 0.561 211011
max_deviation: 2 #was 1
speed: 300
clearance: 10 
probing_second_speed: 10
probing_retract_dist: 3
probing_first_fast: true

[gcode_macro ADAPTIVE_BED_MESH]
description: Perform a bed mesh, but only where and when it's needed
gcode:
    status_meshing
    # 1 ----- GET ORIGINAL BEDMESH PARAMS FROM CONFIG ----------------------
    {% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
    {% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
    {% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
    {% set algo = printer["configfile"].config["bed_mesh"]["algorithm"] %}
    {% set xMeshPPS, yMeshPPS = printer["configfile"].config["bed_mesh"]["mesh_pps"].split(',')|map('trim')|map('int') %}
    # If the SIZE parameter is defined and set not a dummy placeholder, we do the adaptive
    # bed mesh logic. If it's ommited, we still do the original BED_MESH_CALIBRATE function
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}

        # 2 ----- GET MESH SIZE AND MARGIN FROM MACRO CALL --------------------
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set margin = params.MARGIN|default(5)|int %}

        # 3 ----- APPLY MARGINS ----------------------------------------------
        # We use min/max function as we want it to be constrained by the original
        # bedmesh size. This will avoid going outside the machine limits
        {% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
        {% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
        {% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
        {% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}

        # 4 ----- COMPUTE A NEW PROBE COUNT ----------------------------------
        # The goal is to have at least the same precision as from the config. So we compute an equivalent number
        # of probe points on each X/Y dimensions (distance between two points should be the same as in the config)
        {% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
        {% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}

        # Then, three possibilities :
        # a) Both dimensions have less than 3 probe points : the bed_mesh is not needed as it's a small print.
        # b) If one of the dimension is less than 3 and the other is greater. The print looks to be elongated and
        #    need the adaptive bed_mesh : we add probe points to the small direction to reach 3 and be able to do it.
        # c) If both direction are greater than 3, we need the adaptive bed_mesh and it's ok.
        # At the end we control (according to Klipper bed_mesh method: "_verify_algorithm") that the computed probe_count is
        # valid according to the choosen algorithm or change it if needed.
        {% if xProbeCnt < 3 and yProbeCnt < 3 %}
            RESPOND MSG="Adaptive bed mesh: mesh not needed"
            
        {% else %}
            {% set xProbeCnt = [3, xProbeCnt]|max %}
            {% set yProbeCnt = [3, yProbeCnt]|max %}

            # We verify that the number of probe points on each axis is odd or add
            # one to it. This is to have a relative_reference_index point at the center of the mesh
            {% if xProbeCnt % 2 == 0 %}
                {% set xProbeCnt = xProbeCnt + 1 %}
            {% endif %}
            {% if yProbeCnt % 2 == 0 %}
                {% set yProbeCnt = yProbeCnt + 1 %}
            {% endif %}

            # Check of the probe points and interpolation algorithms according to Klipper code
            {% if xMeshPPS != 0 or yMeshPPS != 0 %}
                {% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
                {% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
                {% if algo == "lagrange" and probeCntMax > 6 %}
                    # Lagrange interpolation tends to oscillate when using more than 6 samples: swith to bicubic
                    {% set algo = "bicubic" %}
                {% endif %}
                {% if algo == "bicubic" and probeCntMin < 4 %}
                    {% if probeCntMax > 6 %}
                        # Impossible case: need to add probe point on the small axis to be >= 4 (we want 5 to keep it odd)
                        {% if xProbeCnt > yProbeCnt %}
                            {% set yProbeCnt = 5 %}
                        {% else %}
                            {% set xProbeCnt = 5 %}
                        {% endif %}
                    {% else %}
                        # In this case bicubic is not adapted (less than 4 points): switch to lagrange
                        {% set algo = "lagrange" %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # 5 ----- COMPUTE THE RELATIVE_REFERENCE_INDEX POINT --------------------
            {% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}

            # 6 ----- FORMAT THE PARAMETERS TO CALL BED_MESH_CALIBRATE --------------
            {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
            {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
            {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
            RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
            BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
        {% endif %}
    {% else %}
        RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
        BED_MESH_CALIBRATE
    {% endif %}



[gcode_macro _sb_vars]
# User settings for the StealthBurner status leds. You can change the status colors and led
# configurations for the logo and nozzle here.
variable_colors: {
        'logo': { # Colors for logo states
            'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
            'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
            'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
            'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
            'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
            'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
        },
        'nozzle': { # Colors for nozzle states
            'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
            'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
            'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
        },
        'thermal': {
            'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
            'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
        }
    }
variable_logo_led_name:         "sb_leds" 
# The name of the addressable LED chain that contains the logo LED(s)
variable_logo_idx:              "1" 
# A comma-separated list of indexes LEDs in the logo
variable_nozzle_led_name:       "sb_leds"
# The name of the addressable LED chain that contains the nozzle LED(s). This will
# typically be the same LED chain as the logo.
variable_nozzle_idx:            "2,3"
# A comma-separated list of indexes of LEDs in the nozzle
gcode:
    # This section is required.  Do Not Delete.


[gcode_macro _set_sb_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = params.LED|string %}
    {% set idx = (params.IDX|string).split(',') %}
    {% set transmit_last = params.TRANSMIT|default(1) %}

    {% for led_index in idx %}
        {% set transmit=transmit_last if loop.last else 0 %}
        set_led led={led} red={red} green={green} blue={blue} white={white} index={led_index} transmit={transmit}
    {% endfor %}

[gcode_macro _set_sb_leds_by_name]
gcode:
    {% set leds_name = params.LEDS %}
    {% set color_name = params.COLOR %}
    {% set color = printer["gcode_macro _sb_vars"].colors[leds_name][color_name] %}
    {% set led = printer["gcode_macro _sb_vars"][leds_name + "_led_name"] %}
    {% set idx = printer["gcode_macro _sb_vars"][leds_name + "_idx"] %}
    {% set transmit = params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={color.r} green={color.g} blue={color.b} white={color.w} idx="{idx}" transmit={transmit}

[gcode_macro _set_logo_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].logo_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].logo_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro _set_nozzle_leds]
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.GREEN|default(0)|float %}
    {% set blue = params.BLUE|default(0)|float %}
    {% set white = params.WHITE|default(0)|float %}
    {% set led = printer["gcode_macro _sb_vars"].nozzle_led_name %}
    {% set idx = printer["gcode_macro _sb_vars"].nozzle_idx %}
    {% set transmit=params.TRANSMIT|default(1) %}

    _set_sb_leds led={led} red={red} green={green} blue={blue} white={white} idx="{idx}" transmit={transmit}

[gcode_macro set_logo_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_logo_leds red=0 blue=0 green=0 white=0 transmit={transmit}

[gcode_macro set_nozzle_leds_on]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="on" transmit={transmit}

[gcode_macro set_nozzle_leds_off]
gcode:
    {% set transmit=params.TRANSMIT|default(1) %}
    _set_sb_leds_by_name leds="nozzle" color="off" transmit={transmit}

[gcode_macro status_off]
gcode:
    set_logo_leds_off transmit=0
    set_nozzle_leds_off

[gcode_macro status_ready]
gcode:
    _set_sb_leds_by_name leds="logo" color="standby" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1

[gcode_macro status_busy]
gcode:
    _set_sb_leds_by_name leds="logo" color="busy" transmit=0
    set_nozzle_leds_on

[gcode_macro status_heating]
gcode:
    _set_sb_leds_by_name leds="logo" color="heating" transmit=0
    _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1

[gcode_macro status_leveling]
gcode:
    _set_sb_leds_by_name leds="logo" color="leveling" transmit=0
    set_nozzle_leds_on

[gcode_macro status_homing]
gcode:
    _set_sb_leds_by_name leds="logo" color="homing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode:
    _set_sb_leds_by_name leds="logo" color="cleaning" transmit=0
    set_nozzle_leds_on

[gcode_macro status_meshing]
gcode:
    _set_sb_leds_by_name leds="logo" color="meshing" transmit=0
    set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode:
    _set_sb_leds_by_name leds="logo" color="calibrating_z" transmit=0
    set_nozzle_leds_on

[gcode_macro status_printing]
gcode:
    _set_sb_leds_by_name leds="logo" color="printing" transmit=0
    set_nozzle_leds_on

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = PAUSE_BASE
gcode = 
	{% set velocity = printer.configfile.config.pause_resume.recover_velocity|int %}
	{% set boarder_delta = printer['gcode_macro _USER_VARIABLE'].boarder_delta|int %}
	{% set retract_pause = printer['gcode_macro _USER_VARIABLE'].retract_pause|int %}
	{% set x_park = printer.toolhead.axis_minimum.x|float + boarder_delta %}
	{% set y_park = printer.toolhead.axis_minimum.y|float + boarder_delta %}
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_x = printer.toolhead.position.x|float %}
	{% set act_y = printer.toolhead.position.y|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set wipe_out = printer['gcode_macro _USER_VARIABLE'].wipe_out|float %}
	{% set extruder_idle_temp = printer['gcode_macro _USER_VARIABLE'].extruder_idle_temp|int %}
	{% set ena_debug = printer.save_variables.variables.debug|lower %}
	{% if act_x < (max_x-wipe_out) %}
	{% set safe_x = wipe_out %}
	{% else %}
	{% set safe_x = max_x-act_x %}
	{% endif %}
	{% if act_y < (max_y-wipe_out) %}
	{% set safe_y = wipe_out %}
	{% else %}
	{% set safe_y = max_y - act_y %}
	{% endif %}
	{% if (max_z-act_z) > 0.3 %}
	{% set safe_z_wipe_height = 0.3 %}
	{% set safe_z = (((max_z-act_z)/3)-0.3) %}
	{% else %}
	{% set safe_z = ((max_z-act_z)/3) %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extruder_temp VALUE='"{printer['extruder'].target}"'
	SAVE_GCODE_STATE NAME=PAUSE
	{% if ena_debug == "true" %}
	{action_respond_info('==== PAUSE ====')}
	{action_respond_info("retract_pause: [%s]" % (retract_pause))}
	{action_respond_info("park: [X: %s, Y: %s]" % (x_park,y_park))}
	{action_respond_info("actual: [x:%s,y:%s,z:%s]" % (act_x,act_y,act_z))}
	{action_respond_info("max: [x:%s,y:%s,z:%s]" % (max_x,max_y,max_z))}
	{action_respond_info("safe: [x:%s,y:%s,z:%s]" % (safe_x,safe_y,safe_z))}
	{action_respond_info("safe_z_wipe_height: [%s] wipe_out: [%s]" % (safe_z_wipe_height,wipe_out))}
	{action_respond_info("extruder_temp: [%s]" % (printer['extruder'].target))}
	{action_respond_info("pause/resume velocity: [%s]" % (velocity))}
	{action_respond_info('===============')}
	{% endif %}
	PAUSE_BASE
	G91
	G92 E0
	G1 E-{retract_pause} F1800
	{% if safe_z_wipe_height > 0 %}
	G0 Z{safe_z_wipe_height} F{velocity*60}
	G0 X{safe_x} Y{safe_y} F{velocity*60}
	G0 Z{safe_z-safe_z_wipe_height} F{velocity*60}
	{% else %}
	G0 X{safe_x} Y{safe_y} F{velocity*60}
	G0 Z{safe_z} F{velocity*60}
	{% endif %}
	G90
	SAVE_GCODE_STATE NAME=PAUSEHOPPED
	G1 X{x_park} Y{y_park} F{velocity*60}
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S{extruder_idle_temp}
	SET_IDLE_TIMEOUT TIMEOUT=43200

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = RESUME_BASE
variable_extruder_temp = 0
gcode = 
	{% set velocity = printer.configfile.config.pause_resume.recover_velocity|int %}
	{% set retract_pause = printer['gcode_macro _USER_VARIABLE'].retract_pause|int %}
	{% set ena_debug = printer.save_variables.variables.debug|lower %}
	{% if ena_debug == "true" %}
	{action_respond_info('==== RESUME ====')}
	{action_respond_info("retract_pause: [%s]" % (retract_pause))}
	{action_respond_info("extruder_temp: [%s]" % (extruder_temp))}
	{action_respond_info("pause/resume velocity: [%s]" % (velocity))}
	{action_respond_info('===============')}
	{% endif %}
	{% if extruder_temp > 0 %}
	M109 S{extruder_temp|int}
	{% endif %}
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED={velocity}
	RESTORE_GCODE_STATE NAME=PAUSEHOPPED MOVE=1 MOVE_SPEED={velocity}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED={velocity}
	G91
	M83
	G92 E0
	G1 E{retract_pause} F300
	g92 E0
	RESUME_BASE {get_params}

[include mainsail.cfg]
[include nozzle_scrub.cfg]
[include euclid.cfg]
#[include PRINT_START.cfg]

## 	Thermistor Types
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"

 # endstop was 1.030

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 68.989
#*# pid_ki = 2.967
#*# pid_kd = 400.998
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 26.790
#*# pid_ki = 1.540
#*# pid_kd = 116.535
#*#
#*# [stepper_z]
#*# position_endstop = 0.500
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 54.6
#*# shaper_type_y = mzv
#*# shaper_freq_y = 41.2
